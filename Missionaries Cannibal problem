def is_valid(state):
    m1, c1, m2, c2, boat = state
    if (m1 < c1 and m1 > 0) or (m2 < c2 and m2 > 0):
        return False
    return True

def is_goal(state, target):
    return state == target

def get_next_states(state):
    m1, c1, m2, c2, boat = state
    next_states = []
    
    if boat == 'left':
        passengers = [(1, 0), (2, 0), (0, 1), (0, 2), (1, 1)]
        for m, c in passengers:
            if 0 < m <= m1 and 0 < c <= c1:
                next_state = (m1 - m, c1 - c, m2 + m, c2 + c, 'right')
                if is_valid(next_state):
                    next_states.append(next_state)
    else:
        passengers = [(1, 0), (0, 1), (1, 1)]
        for m, c in passengers:
            if 0 < m <= m2 and 0 < c <= c2:
                next_state = (m1 + m, c1 + c, m2 - m, c2 - c, 'left')
                if is_valid(next_state):
                    next_states.append(next_state)
    
    return next_states

def dfs_missionaries_cannibals(initial_state, target_state):
    stack = [(initial_state, [])]
    visited = set()

    while stack:
        current_state, path = stack.pop()
        visited.add(current_state)

        if is_goal(current_state, target_state):
            return path + [current_state]

        for next_state in get_next_states(current_state):
            if next_state not in visited:
                stack.append((next_state, path + [current_state]))

    return None

if __name__ == "__main__":
    initial_state = (3, 3, 0, 0, 'left')
    target_state = (0, 0, 3, 3, 'right')
    
    solution = dfs_missionaries_cannibals(initial_state, target_state)
    
    if solution:
        print("Solution found:")
        for i, state in enumerate(solution):
            print(f"Step {i + 1}: {state}")
    else:
        print("No solution found.")
