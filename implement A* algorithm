import heapq

class Node:
    def __init__(self, state, parent=None, g=0, h=0):
        self.state = state
        self.parent = parent
        self.g = g 
        self.h = h 

    def f(self):
        return self.g + self.h

    def __lt__(self, other):
        return self.f() < other.f()

def a_star(graph, start, goal):
    open_list = []
    closed_set = set()

    start_node = Node(start, None, 0, heuristic(start, goal))
    heapq.heappush(open_list, start_node)

    while open_list:
        current_node = heapq.heappop(open_list)

        if current_node.state == goal:
            path = []
            while current_node:
                path.append(current_node.state)
                current_node = current_node.parent
            return list(reversed(path))

        closed_set.add(current_node.state)

        for neighbor, cost in graph[current_node.state].items():
            if neighbor in closed_set:
                continue

            g = current_node.g + cost
            h = heuristic(neighbor, goal)
            new_node = Node(neighbor, current_node, g, h)
            
            found = False
            for node in open_list:
                if node.state == neighbor:
                    found = True
                    if g < node.g:
                        node.g = g
                        node.parent = current_node

            if not found:
                heapq.heappush(open_list, new_node)

    return None

def heuristic(node, goal):
    
    x1, y1 = node
    x2, y2 = goal
    return ((x1 - x2) ** 2 + (y1 - y2) ** 2) ** 0.5

def main():
    graph = {
        (0, 0): {(0, 1): 1, (1, 0): 1},
        (0, 1): {(0, 0): 1, (0, 2): 1},
        (0, 2): {(0, 1): 1, (1, 2): 1},
        (1, 0): {(0, 0): 1, (1, 1): 1},
        (1, 1): {(1, 0): 1, (0, 1): 1, (1, 2): 1},
        (1, 2): {(1, 1): 1, (0, 2): 1},
    }

    start = tuple(map(int, input("Enter start node (x y): ").split()))
    goal = tuple(map(int, input("Enter goal node (x y): ").split()))

    path = a_star(graph, start, goal)

    if path:
        print("Shortest path:")
        for node in path:
            print(node)
    else:
        print("No path found")

if __name__ == "__main__":
    main()
