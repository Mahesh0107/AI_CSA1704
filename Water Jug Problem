from collections import deque

def water_jug_problem(jug1_capacity, jug2_capacity, target_amount):
    if target_amount > jug1_capacity + jug2_capacity:
        print("Target amount is greater than the combined capacity of the jugs. No solution exists.")
        return

    visited = set()
    initial_state = (0, 0) 
    queue = deque([(initial_state, [])])  
    while queue:
        current_state, path = queue.popleft()
        jug1, jug2 = current_state

        if jug1 == target_amount or jug2 == target_amount:
            print("Solution found:")
            print("Path:", path)
            return
        
        next_states = [
            ((jug1, jug2_capacity), "Fill Jug 2"),
            ((jug1_capacity, jug2), "Fill Jug 1"),
            ((0, jug2), "Empty Jug 1"),
            ((jug1, 0), "Empty Jug 2"),
            ((jug1 - min(jug1, jug2_capacity - jug2), jug2 + min(jug1, jug2_capacity - jug2)), "Pour from Jug 1 to Jug 2"),
            ((jug1 + min(jug2, jug1_capacity - jug1), jug2 - min(jug2, jug1_capacity - jug1)), "Pour from Jug 2 to Jug 1")
        ]

        for next_state, action in next_states:
            if next_state not in visited:
                visited.add(next_state)
                queue.append((next_state, path + [action]))

    print("No solution found.")

if __name__ == "__main__":
    jug1_capacity = int(input("Enter the capacity of Jug 1: "))
    jug2_capacity = int(input("Enter the capacity of Jug 2: "))
    target_amount = int(input("Enter the target amount: "))
    
    water_jug_problem(jug1_capacity, jug2_capacity, target_amount)
